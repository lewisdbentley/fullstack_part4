{"version":3,"sources":["components/Note.js","services/notes.js","services/login.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","id","token","getAll","request","axios","get","nonExisting","date","then","response","data","concat","create","newObject","a","config","headers","Authorization","post","update","put","setToken","newToken","login","credentials","Notification","message","style","Footer","props","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","setMessage","username","setUsername","password","setPassword","user","setUser","messageStyle","setMessageStyle","useEffect","noteService","initialNotes","handleLogin","event","preventDefault","console","log","loginService","exception","setTimeout","find","n","changedNote","returnedNote","map","catch","error","filter","notesToShow","addNote","noteObject","Math","random","Date","toISOString","handleNoteChange","target","value","successMessage","color","fontSize","fontStyle","whichMessage","loginForm","onSubmit","noteForm","onChange","type","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c8f6f49e.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Note = ({note, toggleImportance}) => {\n    const label = note.important\n      ? 'Make not important' : 'Make important'\n\n    return (\n      <>\n        <li className='note'>\n          {note.content}\n          <button onClick={() => toggleImportance(note.id)}>{label}</button>\n        </li>\n      </>\n    )\n  }\n\n  export default Note","import axios from 'axios'\nconst baseUrl = '/api/notes'\n\n\nlet token = null\n\nconst setToken = (newToken) => {\n    token = `bearer ${newToken}`\n}\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    const nonExisting = {\n        id: 1000,\n        content: \"This note doesn't exist\",\n        date: '2019-05-30T17:30:31.098Z',\n        important: true\n    }\n    return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create =  async newObject => {\n    const config = {\n        headers: { Authorization: token }\n    }\n    const response = await axios.post(baseUrl, newObject, config)\n    return response.data\n}\n\nconst update = (newObject, id) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, setToken }\n","import axios from'axios'\nconst baseUrl = '/api/login'\n\n\nconst login = async credentials => {\n    const response = await axios.post(baseUrl, credentials)\n    return response.data\n}\n\nexport default { login }","import React from 'react'\n\nconst Notification = ({message, style}) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div style={style}>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\n\nconst Footer = (props) => {\n    return (\n        <div style={props.style}>\n            <p>a program by lewis bentley</p>\n        </div>\n    )\n}\n\nexport default Footer","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport loginService from './services/login'\nimport axios from 'axios'\nimport './index.css'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\n\nconst App = (props) => {\n    const [notes, setNotes] = useState(props.notes)\n    const [newNote, setNewNote] = useState(\n        'a new note...'\n    )\n    const [showAll, setShowAll] = useState(false)\n    const [message, setMessage] = useState('')\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [user, setUser] = (null)\n    const [messageStyle, setMessageStyle] = useState(true)\n\n    useEffect(() => {\n        noteService\n        .getAll()\n        .then(initialNotes => {\n            setNotes(initialNotes)\n        })\n    }, [])\n\n    const handleLogin = (event) => {\n        event.preventDefault()\n        console.log('logging in with', username, password)\n\n        try {\n            const user = loginService.login({\n                username, password\n            })\n            noteService.setToken(user.token)        \n            setUser(user)\n            setUsername('')\n            setPassword('')\n\n        } catch (exception) {\n            setMessage('Incorrect credentials')\n            setTimeout(() => {\n                setMessage(null)\n            }, 5000)\n        }\n    }\n\n    const toggleImportance = (id) => {\n        // define the url of our note\n        let url = `http://localhost:3001/notes/${id}`\n        // find our note\n        let note = notes.find(n => n.id === id)\n        // store our note in a variable, and change important\n        let changedNote = {...note, important: !note.important}\n        // sent this PUT request to the server\n        noteService\n            .update(changedNote, id)\n            .then(returnedNote => {\n                console.log(`${changedNote.content} is now ${changedNote.important}`)\n                setNotes(notes.map(note => note.id !== id ? note : changedNote))\n            })\n            .catch((error) => {\n                setMessageStyle(false)\n                setMessage(\n                    `We tried to update ${note.content} but encountered an error`\n                )\n                setTimeout(() => {\n                    setMessage(null)\n                }, 5000)\n                setNotes(notes.filter(n => n.id !== id))\n            })\n    }\n\n    // console.log('You just created', notes.slice(-1)[0].content, 'which is', notes.slice(-1)[0].important === true)\n    \n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important)\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            important: Math.random() < 0.5,\n            date: new Date().toISOString,\n        }\n\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n                console.log(`created ${returnedNote.content}`)\n                setMessageStyle(true)\n                setMessage(`Successfully created ${noteObject.content}`)\n                setTimeout(() => {\n                    setMessage(null)\n                }, 5000)\n                setNotes(notes.concat(returnedNote))\n                setNewNote('')\n            })\n    }\n\n    const handleNoteChange = (event) => {\n        setNewNote(event.target.value)\n    }\n\n    const successMessage = {\n        color: 'green',\n        fontSize: 16,\n        fontStyle: 'italic',\n    }\n\n    const errorMessage = {\n        color: 'red',\n        fontSize: 16,\n        fontStyle: 'italic',\n    }\n\n    const whichMessage = messageStyle\n        ? successMessage\n        : errorMessage\n\n    const loginForm = () => (\n        <form onSubmit={handleLogin}>\n            <div>\n                <input>\n                type=\"text\"\n                value = { username }\n                name=\"username\"\n                onChange={({ target }) => setUsername(target.value)}\n                </input>\n            </div>\n            <div>\n                <input>\n                type=\"text\"\n                value = { password }\n                name=\"password\"\n                onChange={({ target }) => setPassword(target.value)}\n                </input>\n            </div>\n        </form>\n    )\n\n    const noteForm = () => (\n        <form onSubmit={addNote}>\n            <input\n                value={newNote}\n                onChange={handleNoteChange}\n            />\n            <button type=\"submit\">Save</button>\n            < Footer style={successMessage}/>\n        </form>\n    )\n\n    return (\n        <>\n            <h1>Notes</h1>\n            < Notification message={message} style={whichMessage}/>\n\n            {user === null && loginForm()}\n            {user !== null && noteForm()}\n\n            {user === null ?\n             loginForm() :\n             <div>\n                 <p>{ user.username } logged in</p>\n                 { noteForm() }\n             </div>\n            }        \n\n            <button onClick={() => setShowAll(!showAll)}>\n                    show { showAll ? 'important' : 'all'}\n            </button>\n            <ul>\n                {notesToShow.map(note =>\n                    < Note key={note.id} note={note} toggleImportance={toggleImportance}/>\n                )}\n            </ul>\n        </>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\n\nconst notes = [\n    {\n      id: '1',\n      content: 'this is a new note',\n      date: '17-05-2020',\n      important: true\n    },\n    {\n      id: '2',\n      content: 'tussle',\n      date: '17-05-2020',\n      important: false\n    },\n    {\n      id: '3',\n      content: 'Hebrew note',\n      date: '17-05-2020',\n      important: true\n    },\n    {\n      id: '4',\n      content: 'Delicious!!!',\n      date: '17-05-2020',\n      important: true\n    },\n  ]\n\nReactDOM.render(< App notes={notes}/>, document.getElementById('root'))"],"sourceRoot":""}